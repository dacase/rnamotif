head	1.1;
access;
symbols;
locks
	macke:1.1; strict;
comment	@-- @;


1.1
date	98.09.18.04.03.48;	author macke;	state Exp;
branches;
next	;


desc
@starting version.
@


1.1
log
@Initial revision
@
text
@Symbols are required for

	Structure types including single stranded or otherwise unstructured
	Identifiers of the components of the descriptors.
	Literal sequences
	A rich set of addressing operators.

----

	Any run of spaces, tabs and newlines is considered a single space.

	Right now, I don't see any reason for spaces in strings, let alone
	escapes, but if needed: then new lines are not allowed in strings,
	spaces and tabs are treated as typed in, and the usual C-escapes
	apply

----

	Literal sequences are strings of characters enclosed in some kind of
	quotes.
	They always read left to right is 5'->3'.
	They are case independent.
	
	The string may contain other optional information on a character by
	character basis, but "uccg" is all that is required to specify the
	base sequence 5'-uucg-3' 

----

	Addressing should be relative from the start of each sub structure.
	Bases are numbered from 1 to $ where 1 is the 5' base and $ is the 3'
	base of that structure.

	Symbolic addressing including addressing from the 3' end should be
	supported:  Example, $ represents the position of the last (3') base
	of a sequence, the $-1, $-2, ... represent the 2nd from last, 3rd
	from last etc.

----

	Structure descriptors are also numbered beginning with 1.
	Labels are not required if only WC helices are properly nested:

		stem:h5("gcgc") loop:s("uucg") stem:h3("gcgc")

	could be shortened to 

		h5("gcgc") s("uucg") h3("gcgc")
@
