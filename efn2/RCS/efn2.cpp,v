head	1.2;
access;
symbols;
locks; strict;
comment	@// @;


1.2
date	2000.09.15.20.05.09;	author macke;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.14.21.55.02;	author macke;	state Exp;
branches;
next	;


desc
@@


1.2
log
@at least its readable now.
@
text
@#include "algorithm.cpp"


/*	Function getdat

	Function gets the names of data files to open

*/

void getdat(char *loop, char *stackf, char *tstackh, char *tstacki,
	char *tloop, char *miscloop, char *danglef, char *int22,
	char *int21,char *coax, char *tstackcoax,
	char *coaxstack, char *tstack, char *tstackm, char *triloop,
	char *int11,char *Path)
{

	strcpy (loop,Path);
	strcat (loop,"loop.dat");
	strcpy (stackf,Path);
	strcat (stackf,"stack.dat");
	strcpy (tstackh,Path);
	strcat (tstackh,"tstackh.dat");
	strcpy (tstacki,Path);
	strcat (tstacki,"tstacki.dat");
	strcpy (tloop,Path);
	strcat (tloop,"tloop.dat");
	strcpy (miscloop,Path);
	strcat (miscloop,"miscloop.dat");
	strcpy (danglef,Path);
	strcat (danglef,"dangle.dat");
	strcpy (int22,Path);
	strcat (int22,"int22.dat");
	strcpy (int21,Path);
	strcat (int21,"int21.dat");
	strcpy (triloop,Path);
	strcat (triloop,"triloop.dat");
	strcpy (coax,Path);
	strcat (coax,"coaxial.dat");
	strcpy (tstackcoax,Path);
	strcat (tstackcoax,"tstackcoax.dat");
	strcpy (coaxstack,Path);
	strcat (coaxstack,"coaxstack.dat");
	strcpy (tstack,Path);
	strcat (tstack,"tstack.dat");
	strcpy (tstackm,Path);
	strcat (tstackm,"tstackm.dat");
	strcpy (int11,Path);
	strcat (int11,"int11.dat");
}

void main(int argc, char* argv[])
{
	structure ct;
	datatable data;
	char loop2[maxfil],stackf[maxfil],tstackh[maxfil],tstacki[maxfil],
   	tloop[maxfil],miscloop[maxfil],danglef[maxfil],
	triloop[maxfil],int11[maxfil],
	int22[maxfil],int21[maxfil],coax[maxfil],DataPath[maxfil],
	tstackcoax[maxfil],coaxstack[maxfil],tstack[maxfil],tstackm[maxfil];
	char infile[maxfil],outfile[maxfil];
	char temp1[ctheaderlength],temp2[ctheaderlength];
	int i,k;

	if (argc!=3) {
		cout <<
	"EFN2 recalculates the free energy of an RNA structure in a CT file.\n";
		cout << "Command Line Usage: efn2 [in ctfile] [out ctfile]\n";
		cout << "Enter the name of an existing CT file:";
		cin >> infile;
		cout << "Enter the name of an output ct file:";
		cin >> outfile;
	}else{
		strcpy(infile,argv[1]);
		strcpy(outfile,argv[2]);
	}

	// require the data files to be located with the program
	strcpy(DataPath,"");

	// get the names of the files
	getdat (loop2,stackf,tstackh,tstacki,tloop,miscloop,danglef,
   		int22,int21,coax,tstackcoax,coaxstack,tstack,tstackm,triloop,
		int11,DataPath);

	//open the data files and check for error:
	if (opendat (loop2,stackf,tstackh,tstacki,tloop,miscloop,danglef,
		int22,int21, coax,tstackcoax,coaxstack,tstack,tstackm,
		riloop,int11,&data)==0)
	{

		cout << "One of the data files is missing\n";
	}

	// open the ct file
	openct(&ct,infile);

	// calculate the free energies
	efn2(&data,&ct);

	// re-sort the structures by free energy
	sortstructures(&ct);


	//remove the energy from the ct label (ct.ctlabel[1]) and
	//add a carriage return if needed

	for (k=1;k<=ct.numofstructures;k++) {
		strcpy(temp2,ct.ctlabel[k]);
		strcpy(ct.ctlabel[k],temp2+19);
	}


	// add a \n if needed to correct for PC-UNIX differences:
	for (k=1;k<=ct.numofstructures;k++) {
		i = strlen(ct.ctlabel[k]);
		strcpy(temp1,ct.ctlabel[k]+(i-1));
		if (strcmp(temp1,"\n")) {
			// need to add a carriage return:
			strcat(ct.ctlabel[k],"\n");
		}
	}

	// output the structures, re-ordered, in the out file
	ctout(&ct,outfile);
}

void errmsg(int err,int erri)
{

	if (err==30) {
		cout << "End Reached at traceback #"<<erri<<"\n";
	}
	if (err==100) {
		cout << "error # "<<erri;
	   
	}
	switch (err) {
	case '1':
		cout << "Could not allocate enough memory";
		break;
	case '2':
		cout << "Too many possible base pairs";
		break;
	case '3':
		cout << "Too many helixes in multibranch loop";
		break;
	case '4':
		cout << "Too many structures in CT file";
		break;
	default:
		cout << "Unknown error";
		break;
	}
	cin >> err;

	return;
}
@


1.1
log
@Initial revision
@
text
@a0 2


d11 4
a14 5
		char *tloop, char *miscloop, char *danglef, char *int22,
      char *int21,char *coax, char *tstackcoax,
      char *coaxstack, char *tstack, char *tstackm, char *triloop,
      char *int11,char *Path)

d17 32
a48 33
strcpy (loop,Path);
strcat (loop,"loop.dat");
strcpy (stackf,Path);
strcat (stackf,"stack.dat");
strcpy (tstackh,Path);
strcat (tstackh,"tstackh.dat");
strcpy (tstacki,Path);
strcat (tstacki,"tstacki.dat");
strcpy (tloop,Path);
strcat (tloop,"tloop.dat");
strcpy (miscloop,Path);
strcat (miscloop,"miscloop.dat");
strcpy (danglef,Path);
strcat (danglef,"dangle.dat");
strcpy (int22,Path);
strcat (int22,"int22.dat");
strcpy (int21,Path);
strcat (int21,"int21.dat");
strcpy (triloop,Path);
strcat (triloop,"triloop.dat");
strcpy (coax,Path);
strcat (coax,"coaxial.dat");
strcpy (tstackcoax,Path);
strcat (tstackcoax,"tstackcoax.dat");
strcpy (coaxstack,Path);
strcat (coaxstack,"coaxstack.dat");
strcpy (tstack,Path);
strcat (tstack,"tstack.dat");
strcpy (tstackm,Path);
strcat (tstackm,"tstackm.dat");
strcpy (int11,Path);
strcat (int11,"int11.dat");

d51 2
a52 4



void main(int argc, char* argv[]) {
d54 2
a55 2
   datatable data;
   char loop2[maxfil],stackf[maxfil],tstackh[maxfil],tstacki[maxfil],
d57 6
a62 6
      triloop[maxfil],int11[maxfil],
      int22[maxfil],int21[maxfil],coax[maxfil],DataPath[maxfil],
      tstackcoax[maxfil],coaxstack[maxfil],tstack[maxfil],tstackm[maxfil];
   char infile[maxfil],outfile[maxfil];
   char temp1[ctheaderlength],temp2[ctheaderlength];
   int i,k;
d65 11
a75 12
   	cout << "EFN2 recalculates the free energy of an RNA structure in a CT file.\n";
    	cout << "Command Line Usage: efn2 [in ctfile] [out ctfile]\n";
      cout << "Enter the name of an existing CT file:";
      cin >> infile;
      cout << "Enter the name of an output ct file:";
      cin >> outfile;
   }
   else {
   	strcpy(infile,argv[1]);
      strcpy(outfile,argv[2]);

   }
d77 2
a78 1
   strcpy(DataPath,"");//require the data files to be located with the program
d80 2
a81 1
   getdat (loop2,stackf,tstackh,tstacki,tloop,miscloop,danglef,
d83 1
a83 6
         int11,DataPath); //get the names of the files

   //open the data files and check for error:
   if (opendat (loop2,stackf,tstackh,tstacki,tloop,miscloop,danglef,int22,int21,
   	coax,tstackcoax,coaxstack,tstack,tstackm,triloop,int11,&data)==0) {

d85 5
a89 2
      cout << "One of the data files is missing\n";
   }
d91 2
a92 2
   //open the ct file
   openct(&ct,infile);
d94 2
a95 2
   //calculate the free energies
   efn2(&data,&ct);
d97 2
a98 2
   //re-sort the structures by free energy
   sortstructures(&ct);
d100 2
a102 2
   //remove the energy from the ct label (ct.ctlabel[1]) and
   //add a carriage return if needed
d104 2
a105 4
   for (k=1;k<=ct.numofstructures;k++) {
   	strcpy(temp2,ct.ctlabel[k]);
   	strcpy(ct.ctlabel[k],temp2+19);
   }
d107 4
a111 7
   //add a /n if needed to correct for PC-UNIX differences:
   for (k=1;k<=ct.numofstructures;k++) {
   	i = strlen(ct.ctlabel[k]);
   	strcpy(temp1,ct.ctlabel[k]+(i-1));
   	if (strcmp(temp1,"\n")) {
    		//need to add a carriage return:
      	strcat(ct.ctlabel[k],"\n");
d113 9
a121 2
   	}
   }
d123 2
a124 8



   //output the structures, re-ordered, in the out file
   ctout(&ct,outfile);



d127 2
a128 1
void errmsg(int err,int erri) {
d130 8
a137 9
if (err==30) {
	cout << "End Reached at traceback #"<<erri<<"\n";
   
}
if (err==100) {
	cout << "error # "<<erri;
   
}
switch (err) {
d139 16
a154 15
   	cout << "Could not allocate enough memory";
      break;
   case '2':
   	cout << "Too many possible base pairs";
      break;
   case '3':
   	cout << "Too many helixes in multibranch loop";
   case '4':
   	cout << "Too many structures in CT file";
   default:
   	cout << "Unknown error";
}
cin >> err;

return;
d156 1
@
